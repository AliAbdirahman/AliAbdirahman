# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B4oPyBSTKrLqwUvqCRzGwA8ApIxx06Dl
"""

import matplotlib.pyplot as plt
def f(x,y):
  return -2*(x**3)+12*(x**2)-20*x+8.5

def euler(x,y,xt,n):
  xi = []
  yi = []
  xi.append(x)
  yi.append(y)
  h = (xt-x)/n
  for i in range (0,n):
    x= x+h
    y = y + f(x,y)*h
    xi.append(x)
    yi.append(y)
  return xi,yi
def heun(x,y,xt,n):
  xi = []
  yi = []
  xi.append(x)
  yi.append(y)
  h = (xt-x)/n
  for i in range (0,n):
    k1= f(x,y)
    k2 = f(x+h,y+k1*h)
    y = y + (k1+k2)*h/2
    xi.append(x+(i+1)*h)
    yi.append(y)
  return xi,yi
def midpoint(x,y,xt,n):
  xi = []
  yi = []
  xi.append(x)
  yi.append(y)
  h = (xt-x)/n
  for i in range (0,n):
    k1= f(x,y)
    k2 = f(x+h/2,y+k1*h/2)
    y = y + k2*h
    xi.append(x+(i+1)*h)
    yi.append(y)
  return xi,yi
def ralston(x,y,xt,n):
  xi = []
  yi = []
  xi.append(x)
  yi.append(y)
  h = (xt-x)/n
  for i in range (0,n):
    k1= f(x,y)
    k2 = f(x+3*h/4,y+3*k1*h/4)
    y = y + (k1/3+2*k2/3)*h
    xi.append(x+(i+1)*h)
    yi.append(y)
  return xi,yi
def runge_kutta4(x,y,xt,n):
  xi = []
  yi = []
  xi.append(x)
  yi.append(y)
  h = (xt-x)/n
  for i in range (0,n):
    k1= f(x,y)
    k2 = f(x+h/2,y+k1*h/2)
    k3 = f(x+h/2,y+k2*h/2)
    k4 = f(x+h,y+k3*h)
    y = y + (k1+2*k2+2*k3+k4)*h/6
    xi.append(x+(i+1)*h)
    yi.append(y)
  return xi,yi
x= 0
y=1
xt=0.5
n= 32

xi , ye = euler(x,y,xt,n)
xi , yh = heun(x,y,xt,n)
xi , ym = midpoint(x,y,xt,n)
xi , yr = ralston(x,y,xt,n)
xi , yr4 = runge_kutta4(x,y,xt,n)
print("Exact solution:", 3.751521)
print("Euler", ye[n], "True error:", 3.751521-ye[n])
print("Heun", yh[n], "True error:", 3.751521-yh[n])
print("Midpoint", ym[n], "True error:", 3.751521-ym[n])
print("Ralston", yr[n], "True error:", 3.751521-yr[n])
print("Runge-Kutta4", yr4[n], "True error:", 3.751521-yr4[n])

plt.figure(figsize=(12,8))
plt.plot(xi , ye, "b", label="Euler")
plt.plot(xi , yh, "g", label="Heun")
plt.plot(xi , ym, "r", label="Midpoint")
plt.plot(xi , yr, "y", label="Ralston")
plt.plot(xi , yr4, "k", label="Runge-Kutta4")
plt.plot(0.5 , 3.751521, "ro", label="Exact Solution")
plt.legend()
plt.show()